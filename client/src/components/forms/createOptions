createSelectItems() {
     let items = [];
     for (let i = 0; i <= this.props.maxValue; i++) {
          items.push(<option key={i} value={i}>{i}</option>);
          //here I will be creating my options dynamically based on
          //what props are currently passed to the parent component
     }
     return items;
 }

onDropdownSelected(e) {
    console.log("THE VAL", e.target.value);
    //here you will see the current selected value of the select input
}

<Input type="select" onChange={this.onDropdownSelected} label="Multiple Select" multiple>
      {this.createSelectItems()}
 </Input>

 import * as YourTypes from 'Constants/YourTypes';
....
<Input ...>
    {Object.keys(YourTypes).map((t,i) => <option key={i} value={t}>{t}</option>)}
</Input>
Assuming you store the list constants in a separate file (and you should, unless they're downloaded from a web service):

# YourTypes.js
export const MY_TYPE_1="My Type 1"
....
